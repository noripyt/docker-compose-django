"""
Django settings for example project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from ipaddress import ip_interface
from pathlib import Path
import socket

from django.conf.global_settings import LANGUAGES
from django.utils.log import DEFAULT_LOGGING
from django.utils.translation import gettext_lazy as _
from dotenv import dotenv_values

from . import constants

dotenv_secret_path = Path('/run/secrets/.env.secrets')
if not dotenv_secret_path.exists():
    dotenv_secret_path = Path(dotenv_secret_path.name)
    if not dotenv_secret_path.exists():
        raise ValueError('You did not correctly create a .env.secrets file at the project root.')
dotenv_secret = dotenv_values(dotenv_secret_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

SECRET_KEY = dotenv_secret['SECRET_KEY']

DEBUG = constants.DJANGO_ENVIRONMENT == 'dev'

ALLOWED_HOSTS = [constants.DOMAIN, 'django']
CSRF_TRUSTED_ORIGINS = [f'https://{constants.DOMAIN}']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'example.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': DEBUG,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': None if DEBUG else [
                (
                    'django.template.loaders.cached.Loader',
                    [
                        'django.template.loaders.filesystem.Loader',
                        'django.template.loaders.app_directories.Loader',
                    ],
                ),
            ],
        },
    },
]

WSGI_APPLICATION = 'example.wsgi.application'


# Modifies the default LOGGING to display to console when in production.
LOGGING = {
    **DEFAULT_LOGGING,
    'handlers': {
        **DEFAULT_LOGGING['handlers'],
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
}


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'example',
        'USER': 'example',
        'CONN_MAX_AGE': None,
        'CONN_HEALTH_CHECKS': True,
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'TIMEOUT': None,
        'OPTIONS': {
            'MAX_ENTRIES': 100000,
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = constants.LOCALE
__LANGUAGES_DICT = dict(LANGUAGES)
LANGUAGES = [
    (code, _(__LANGUAGES_DICT.get(code, code)))
    for code in constants.LANGUAGES_CODES
]

TIME_ZONE = constants.TZ

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_HOST_USER = 'noreply@example.com'
EMAIL_HOST_PASSWORD = dotenv_secret['EMAIL_HOST_PASSWORD']
DEFAULT_FROM_EMAIL = (
    f'{constants.PROJECT_VERBOSE} <{EMAIL_HOST_USER}>' if constants.DJANGO_ENVIRONMENT == 'prod'
    else f'{constants.PROJECT_VERBOSE} {constants.DJANGO_ENVIRONMENT} <{EMAIL_HOST_USER}>'
)
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_SUBJECT_PREFIX = ''

if DEBUG:
    INSTALLED_APPS.append('debug_toolbar')

    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

    INTERNAL_IPS = ['127.0.0.1']
    try:
        DOCKER_INTERNAL_SUBNET = ip_interface(f"{socket.gethostbyname('django')}/255.255.0.0").network
        INTERNAL_IPS.extend([str(ip) for ip in DOCKER_INTERNAL_SUBNET])
    except socket.gaierror:
        pass

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

else:

    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
