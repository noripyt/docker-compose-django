include:
  - networks.yaml
  - volumes.yaml


services:
  postgresql:
    image: postgres:16.3-alpine
    user: postgres
    environment:
      # We have to redefine POSTGRES_DB and POSTGRES_USER as themselves due to this: https://docs.docker.com/compose/environment-variables/envvars-precedence/
      POSTGRES_DB: $PROJECT
      POSTGRES_USER: $PROJECT
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: --locale-provider=icu --icu-locale=$POSTGRES_LOCALE
      LC_COLLATE: $LANG
      LC_CTYPE: $LANG
      LC_MESSAGES: $LANG
      LC_MONETARY: $LANG
      LC_NUMERIC: $LANG
      LC_TIME: $LANG
    volumes:
      - postgresql:/var/lib/postgresql/data
      - postgresql-socket:/var/run/postgresql
    network_mode: none
    read_only: true
    tmpfs:
      - /tmp/
      - /run/postgresql/
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", $PROJECT ]
      interval: 1s
      timeout: 1s
      retries: 60
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_READ_SEARCH
      - FOWNER
      - SETGID
      - SETUID
    deploy:
      mode: global
      resources:
        limits:
          cpus: "1"
          memory: 500M
        reservations:
          cpus: "0.1"
          memory: 50M
  migrate:
    image: $PROJECT/django:${IMAGES_TAG:-latest}
    user: django
    command: python manage.py migrate
    volumes:
      - postgresql-socket:/var/run/postgresql
      - media:/srv/media
    networks:
      default:
    read_only: true
    tmpfs:
      - /tmp/
    restart: "no"
    depends_on:
      postgresql:
        condition: service_healthy
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2500M
        reservations:
          memory: 100M
  django:
    build:
      context: .
      target: django
      args:
        PROJECT: $PROJECT
        DJANGO_BASE_IMAGE: ${DJANGO_BASE_IMAGE:-python:3.12.3-slim-bookworm}
        DJANGO_PRE_INSTALL_RUN: ${DJANGO_PRE_INSTALL_RUN:-}
        DJANGO_APT_DEPENDENCIES: ${DJANGO_APT_DEPENDENCIES:-}
        DJANGO_ROOT: ${DJANGO_ROOT}
        DJANGO_POST_INSTALL_RUN: ${DJANGO_POST_INSTALL_RUN:-}
        DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE
        DJANGO_CPUS: ${DJANGO_CPUS:-1}
        DOMAIN: $DOMAIN
    image: $PROJECT/django:${IMAGES_TAG:-latest}
    user: django
    volumes:
      - postgresql-socket:/var/run/postgresql
      - media:/srv/media
    tmpfs:
      - /tmp/
    networks:
      default:
    read_only: true
    expose:
      - 8000
    healthcheck:
      test: python3 -c "import urllib.request; urllib.request.urlopen('http://django:8000${DJANGO_HEALTHCHECK_URL:-/}')"
      interval: 10s
      timeout: 10s
      retries: 12
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          cpus: "${DJANGO_CPUS:-1}"
          memory: 4000M
        reservations:
          cpus: "0.1"
          memory: 500M
  nginx:
    build:
      context: .
      target: nginx
      args:
        PROJECT: $PROJECT
        DJANGO_BASE_IMAGE: ${DJANGO_BASE_IMAGE:-python:3.12.3-slim-bookworm}
        DJANGO_PRE_INSTALL_RUN: ${DJANGO_PRE_INSTALL_RUN:-}
        DJANGO_APT_DEPENDENCIES: ${DJANGO_APT_DEPENDENCIES:-}
        DJANGO_ROOT: ${DJANGO_ROOT}
        DJANGO_POST_INSTALL_RUN: ${DJANGO_POST_INSTALL_RUN:-}
        DJANGO_SETTINGS_MODULE: $DJANGO_SETTINGS_MODULE
        DJANGO_CPUS: ${DJANGO_CPUS:-1}
        NGINX_ROOT: ${NGINX_ROOT}
        DOMAIN: $DOMAIN
    image: $PROJECT/nginx:${IMAGES_TAG:-latest}
    environment:
      # We have to redefine some variables as themselves due to this: https://docs.docker.com/compose/environment-variables/envvars-precedence/
      DOMAIN: $DOMAIN
      ALTERNATE_DOMAINS: $ALTERNATE_DOMAINS
      IPV4_SUBNET: $IPV4_SUBNET
      IPV6_SUBNET: $IPV6_SUBNET
      CLIENT_MAX_BODY_SIZE: 2000M
      HSTS_MAX_AGE: 86400
      CSP_DEFAULT: default-src 'self'
      CSP_SCRIPT: script-src 'self' 'unsafe-inline' 'unsafe-eval'
      CSP_IMG: "img-src 'self' data: blob:"
      CSP_STYLE: style-src 'self' 'unsafe-inline'
      CSP_FONT: "font-src 'self' data:"
      CSP_CONNECT: connect-src 'self'
      CSP_FRAME: frame-src 'self'
      CSP_OBJECT: object-src 'self'
      PROXY_READ_TIMEOUT: 21600s
    volumes:
      - media:/srv/media:ro
      - nginx-logs:/var/log/nginx
    networks:
      default:
    read_only: true
    tmpfs:
      - /var/cache/nginx/
      - /var/run/
      - /etc/nginx/conf.d/
    healthcheck:
      test: nc -vz -w1 nginx 80
      interval: 1s
      timeout: 1s
      retries: 60
    restart: unless-stopped
    depends_on:
      django:
        condition: service_healthy
    expose:
      - 80
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 100M
        reservations:
          cpus: "0.1"
          memory: 6M
    labels:
      traefik.enable: true
      traefik.http.routers.nginx.rule: Host(`www.$DOMAIN`, `$DOMAIN`)
  traefik:
    image: traefik:2.11.4
    container_name: traefik
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      default:
    read_only: true
    restart: unless-stopped
    healthcheck:
      test: nc -z -w1 traefik 80
      interval: 1s
      timeout: 1s
      retries: 60
    depends_on:
      nginx:
        condition: service_healthy
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 500M
        reservations:
          cpus: "0.1"
          memory: 50M
    labels:
      traefik.enable: true
  fail2ban:
    build:
      context: fail2ban
      args:
        PROJECT: $PROJECT
        TZ: $TZ
        HOST_HAS_SSH: $HOST_HAS_SSH
    image: $PROJECT/fail2ban:${IMAGES_TAG:-latest}
    container_name: fail2ban
    network_mode: host
    volumes:
      - /var/log/auth.log:/var/log/auth.log:ro
      - nginx-logs:/var/log/nginx:ro
    healthcheck:
      test: [ "CMD", "fail2ban-client", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 6
    depends_on:
      traefik:
        condition: service_healthy
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - NET_ADMIN
      - NET_RAW
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 250M
        reservations:
          cpus: "0.1"
          memory: 30M
    restart: unless-stopped
